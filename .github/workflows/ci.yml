name: CI (format → lint → tests)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write  # needed for auto-fix commits

jobs:
  format:
    name: Format (Black Auto-Fix)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install Black
        run: |
          python -m pip install --upgrade pip
          pip install black

      - name: Run Black (Check)
        run: python -m black . --check --diff || true

      - name: Auto-fix formatting and commit
        if: github.event_name == 'push'
        run: |
          python -m black .
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "style: auto-format with Black" || echo "No formatting changes to commit"
          git push

  lint:
    name: Lint (Ruff)
    needs: format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install Ruff
        run: |
          python -m pip install --upgrade pip
          pip install ruff

      - name: Run Ruff
        run: ruff check .

  tests:
    name: Tests (pytest)
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pip install pytest pytest-cov

      - name: Run pytest with coverage
        run: pytest -q --maxfail=1 --disable-warnings --cov=. --cov-report=term-missing

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}
          path: ./.coverage*
          if-no-files-found: ignore
